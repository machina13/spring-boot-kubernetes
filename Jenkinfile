pipeline {
    agent any
    environment {
	SCA = '/var/jenkins_home/DependencyCheck/dependency-check/bin/dependency-check.sh'
		 }	 
    stages {
        stage('SAST') {
            steps {
			withSonarQubeEnv('sonar') {
	//			sh 'set +x; chmod 777 mvnw'
	//	                sh './mvnw clean package'
				sh './mvnw org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.login=eb402dfd87ab83bfa88e9047d9c7add47053da27 -Dsonar.branch.name=master -Dsonar.host.url=https://sonarcloud.io -Dsonar.projectKey=machina13_spring-boot-kubernetes -Dsonar.organization=machina13'
				}
        	    	}	
	        }	
	stage('Check Quality Gate') {
          steps {
		script {
		    timeout(time: 60, unit: 'MINUTES') {
//				waitForQualityGate abortPipeline: true
			//waitForQualityGate abortPipeline: true
			def qg = waitForQualityGate()
        	      	if (qg.status != 'OK') {
	                      error "Pipeline aborted due to quality gate failure: ${waitForQualityGate.status}"
					}
				}
			}

		}
	}
	stage('Build') {
            steps {
		sh "keytool -importcert -file '${WORKSPACE}'/nvd.nist.gov.cer -alias nvd -keystore $JAVA_HOME/jre/lib/security/cacerts (password = 'changeit')"
		sh 'export MAVEN_OPTS="-Djavax.net.ssl.keyStore=$JAVA_HOME/jre/lib/security/cacert -Djavax.net.ssl.keyStorePassword=changeit -Dmaven.wagon.http.ssl.insecure=true -Dmaven.wagon.http.ssl.allowall=true -Ddownloader.quick.query.timestamp=false"'
                sh 'set +x; chmod 777 mvnw'
                sh './mvnw clean package'
            }
        }
	stage ('OWASP Dependency-Check Vulnerabilities') {  
		steps { 
		sh "$SCA --project 'tarea4' --failOnCVSS 7 --scan '${WORKSPACE}'/target/*.jar"
		}  
	}  
    }
}

